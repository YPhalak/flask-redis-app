## **Docker Networking and Volume - Beginner Guide**

### **1. Docker Networking**
Docker networking allows containers to communicate with each other or with the external world. It provides different types of networks depending on your requirements.

#### **Types of Docker Networks**
1. **Bridge Network (Default)**
   - Used when containers need to communicate within the same host.
   - If no network is specified, Docker uses `bridge`.

   **Commands:**
   ```sh
   # List available networks
   docker network ls
   
   # Create a custom bridge network
   docker network create my_bridge_network

   # Run a container in a bridge network
   docker run -d --name my_container --network my_bridge_network nginx

   # Inspect network details
   docker network inspect my_bridge_network
   ```

2. **Host Network**
   - Shares the hostâ€™s networking stack (no network isolation).
   - Used for performance-sensitive applications.

   **Command:**
   ```sh
   docker run -d --network host nginx
   ```

3. **None Network**
   - No network access.
   - Used when isolation is needed.

   **Command:**
   ```sh
   docker run -d --network none nginx
   ```

4. **Overlay Network**
   - Used in Docker Swarm to connect containers across multiple hosts.

   **Command:**
   ```sh
   docker network create -d overlay my_overlay_network
   ```

#### **Connecting Two Containers via Bridge Network**
```sh
# Create a custom network
docker network create my_custom_network

# Run two containers and attach them to the network
docker run -d --name app --network my_custom_network nginx
docker run -d --name db --network my_custom_network mysql

# Containers can now communicate using container names
docker exec -it app ping db
```

---

### **2. Docker Volume**
Docker volumes are used to persist data even after the container stops or is removed.

#### **Types of Volumes**
1. **Named Volume** - Managed by Docker and stored in `/var/lib/docker/volumes/`
2. **Bind Mount** - Maps a host machine directory to a container path.

#### **Basic Volume Commands**
```sh
# List volumes
docker volume ls

# Create a volume
docker volume create my_volume

# Inspect volume details
docker volume inspect my_volume

# Remove a volume
docker volume rm my_volume
```

#### **Using a Volume in a Container**
```sh
# Run a container with a named volume
docker run -d --name my_container -v my_volume:/data nginx
```
The `/data` directory inside the container is now mapped to `my_volume`.

#### **Using a Bind Mount**
```sh
docker run -d --name my_container -v /home/user/data:/app/data nginx
```
The `/app/data` directory inside the container is mapped to `/home/user/data` on the host.

---

### **3. Combining Networking and Volumes**
```sh
# Create a network
docker network create my_network

# Create a volume
docker volume create my_data

# Run a database container with volume and network
docker run -d --name mysql_container --network my_network -v my_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql
```
Now, `mysql_container` is connected to `my_network` and persists data in `my_data`.

---

### **Summary**
- **Networking:** Allows communication between containers.
- **Volumes:** Store and persist container data.
- **Use bridge networks** for local container communication.
- **Use volumes** to avoid losing important data.

Would you like a hands-on challenge based on these concepts? ðŸš€



Install ping Based on OS Type

If your container runs Ubuntu or Debian, install ping with:

docker exec -it <container_id> sh -c "apt update && apt install -y iputils-ping"

